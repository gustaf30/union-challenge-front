<div className={`flex flex-col min-h-screen w-full p-6 ${darkMode ? 'bg-gray-900 text-white' : 'bg-white text-black'}`}>
      <header className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">
          <a href='./'>To do List</a>
        </h1>
        <div className="flex space-x-4">
          <Button onClick={() => router.push('/new')}>New Task</Button>
          <DarkModeToggle darkMode={darkMode} setDarkMode={setDarkMode} />
        </div>
      </header>

      <Input
        placeholder="Search tasks..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className={`w-1/4 ${darkMode ? 'border-blue-900 text-white' : ''}`}
      />

      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="tasksList">
          {(provided) => (
            <div {...provided.droppableProps} ref={provided.innerRef} className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
              {tasks.map((task, index) => (
                <TaskCard key={task.id} task={task} index={index} darkMode={darkMode} onDelete={() => openDeleteDialog(task.id)} />
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>

      <Pagination
        page={page}
        totalPages={totalPages}
        setPage={setPage}
        darkMode={darkMode}
      />

      <DialogDeleteTask
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        onDelete={handleDeleteTask}
      />
    </div>